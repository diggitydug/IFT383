     The drawshapes.py program is a sort of drawing application. There is a GUI interface that appears and allows you to select between drawing a rectangle and ellipse. The program also allows you to customize, the height, width, fill color, border color, border width, and the position of the shape. The script uses a tkinter frame. This frame contains all the various tkinter widgets that perform the various functions.
      I knew I wanted to create something with a GUI, but I have little experience in creating GUI’s with python. I first had to discern what package library to use to write my program. I ended up deciding on Tkinter as there was plenty of documentation about it and it comes preinstalled with most python distributions. From here I had to learn about Tkinter and how it functions when writing a program. The documentation pages for Tkinter happen to be quite in depth and allowed me to get just about all of the information I needed.
     The actual process of writing involved learning to create the frame, and how to place elements inside of it. By default, Tkinter used a grid layout with elements taking up as much space as needed within the grid elements as if the program was a fancy spreadsheet. One I figured out this process I learned that the cells evenly space themselves in the window. This meant I needed to use a large number of rows to create space for my vertically oriented UI on the left of the drawing canvas. From this point I merely had to place all of the required Tkinter widgets on the page in the locations that I wanted them. After placing all of the widgets in the location that I wanted I had to define the functions that interacting with each of the elements would do. I then went ahead and programmed each of the functions so that the shapes would be added based on the user input.
     Testing the script was a lot of trial and error for the placing of the elements in the locations I wanted. I am mostly used to HTML based placement, so the grid-based placement seemed more rigid and less flexible. Figuring out the proper placement for everything is what took the most effort. The actual coding of the functions and some input error handling was relatively simple in the amount of time that it took to handle. 
     The advice that I would have given myself before starting the script is that creating a GUI is much more work than I would have thought especially when compared to HTML. It was a tough time learning about the libraries that I need. I would tell myself that there is a reason that many “technical” systems are written to report and take input in a command line interface rather than in a GUI. They are hard to program and never really look how you wanted them or function how you wanted it to. Overall, I would tell myself that I am not meant to be a front-end developer.
